using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using ColdMint.scripts.character;
using ColdMint.scripts.inventory;
using ColdMint.scripts.map.room;
using ColdMint.scripts.utils;
using Godot;

namespace ColdMint.scripts.map;

/// <summary>
/// <para>WaveManager</para>
/// <para>波数管理器</para>
/// </summary>
public class WaveManager
{
    /// <summary>
    /// <para>A character automatically generated by the room</para>
    /// <para>由房间自动生成的角色</para>
    /// </summary>
    private readonly List<CharacterTemplate> _spawnedCharacter = [];

    /// <summary>
    /// <para>Items automatically generated by the room</para>
    /// <para>由房间自动生成的物品</para>
    /// </summary>
    private readonly List<IItem> _spawnedItem = [];


    /// <summary>
    /// <para>Find the corresponding generation tag based on the item.</para>
    /// <para>根据物品查找对应的生成标记。</para>
    /// </summary>
    private readonly Dictionary<IItem, ISpawnMarker> _itemSpawnMarker = new();

    private readonly Dictionary<IItem, Action<CharacterTemplate>> _onPickUpDictionary = new();

    /// <summary>
    /// <para>hasSpawnedEntity</para>
    /// <para>是否生成过实体</para>
    /// </summary>
    public bool HasSpawnedEntity { get; set; }

    /// <summary>
    /// <para>Current generated wave number</para>
    /// <para>当前生成波数</para>
    /// </summary>
    private int _currentWaveNumber;

    /// <summary>
    /// <para>Max generated wave number</para>
    /// <para>最大的生成波数</para>
    /// </summary>
    private int _maxWaveNumber;

    /// <summary>
    /// <para>When a wave of monsters is killed how long it takes to enter the next wave</para>
    /// <para>当一波怪物被杀死后多长时间进入下一波</para>
    /// </summary>
    public TimeSpan Delay = TimeSpan.FromMilliseconds(300);

    public Action? OnWaveComplete { get; set; }

    public Action? OnWaveStart { get; set; }

    /// <summary>
    /// <para>Spawn a wave of entities</para>
    /// <para>生成一波实体</para>
    /// </summary>
    public async Task SpawnEnemyWaveAsync(Node? autoSpawn)
    {
        if (autoSpawn == null)
        {
            return;
        }
        if (_maxWaveNumber > 0 && _currentWaveNumber == _maxWaveNumber)
        {
            //Complete all waves.
            //完成所有的波次。
            OnWaveComplete?.Invoke();
            return;
        }

        await NodeUtils.ForEachNodeAsync<ISpawnMarker>(autoSpawn, async marker =>
        {
            var node2DList = await marker.Spawn(_currentWaveNumber);
            if (node2DList == null || node2DList.Length == 0)
            {
                return false;
            }

            foreach (var node2D in node2DList)
            {
                if (node2D is CharacterTemplate characterTemplate)
                {
                    //The maximum wave number should be the maximum wave number produced by living organisms.For now, the player's condition for the next step is to kill all enemies.
                    //最大波数应该是生物生成的最大波数。就目前而言，玩家进入下一步的条件是杀死所有敌人。
                    _maxWaveNumber = Math.Max(_maxWaveNumber, marker.GetMaxWaveNumber());
                    if (characterTemplate.RequiredForWaveAdvance)
                    {
                        _spawnedCharacter.Add(characterTemplate);
                        characterTemplate.TreeExited += async () =>
                        {
                            _spawnedCharacter.Remove(characterTemplate);
                            if (_spawnedCharacter.Count == 0)
                            {
                                //All the creatures they summoned are dead.
                                //召唤的生物全死了。
                                _currentWaveNumber++;
                                await Task.Delay(Delay);
                                await SpawnEnemyWaveAsync(autoSpawn);
                            }
                        };
                    }
                }

                if (node2D is IItem item)
                {
                    _itemSpawnMarker[item] = marker;
                    _spawnedItem.Add(item);
                    Action<CharacterTemplate> onPickUp = _ =>
                    {
                        //When an item is picked up by a creature, we look for its corresponding generative marker.
                        //当物品被生物捡起时，我们查找与其对应的生成标记。
                        var goalMark = _itemSpawnMarker[item];
                        _spawnedItem.Remove(item);
                        foreach (var otherItem in _spawnedItem)
                        {
                            var temporarilyMark = _itemSpawnMarker[otherItem];
                            if (goalMark == temporarilyMark)
                            {
                                otherItem.OnPickUp -= _onPickUpDictionary[otherItem];
                                continue;
                            }

                            //The mark is not the same as the mark on the item picked up by the creature.
                            //标记与生物捡起的物品标记不是同一个。
                            otherItem.QueueFreeSelf();
                        }

                        item.OnPickUp -= _onPickUpDictionary[item];
                    };
                    item.OnPickUp += onPickUp;
                    _onPickUpDictionary[item] = onPickUp;
                }
            }

            return false;
        });
        if (_spawnedCharacter.Count > 0)
        {
            OnWaveStart?.Invoke();
        }
    }
}