using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using ColdMint.scripts.character;
using ColdMint.scripts.map.room;
using ColdMint.scripts.utils;
using Godot;

namespace ColdMint.scripts.map;

/// <summary>
/// <para>WaveManager</para>
/// <para>波数管理器</para>
/// </summary>
public class WaveManager
{
    /// <summary>
    /// <para>A character automatically generated by the room</para>
    /// <para>由房间自动生成的角色</para>
    /// </summary>
    private readonly List<CharacterTemplate> _spawnedCharacter = [];

    /// <summary>
    /// <para>hasSpawnedEntity</para>
    /// <para>是否生成过实体</para>
    /// </summary>
    public bool HasSpawnedEntity { get; set; }

    /// <summary>
    /// <para>Current generated wave number</para>
    /// <para>当前生成波数</para>
    /// </summary>
    private int _currentWaveNumber;

    /// <summary>
    /// <para>Max generated wave number</para>
    /// <para>最大的生成波数</para>
    /// </summary>
    private int _maxWaveNumber;

    /// <summary>
    /// <para>When a wave of monsters is killed how long it takes to enter the next wave</para>
    /// <para>当一波怪物被杀死后多长时间进入下一波</para>
    /// </summary>
    public TimeSpan Delay = TimeSpan.FromMilliseconds(300);

    public Action? OnWaveComplete { get; set; }

    public Action? OnWaveStart { get; set; }

    /// <summary>
    /// <para>Spawn a wave of entities</para>
    /// <para>生成一波实体</para>
    /// </summary>
    public void SpawnEnemyWave(Node? autoSpawn)
    {
        if (autoSpawn == null)
        {
            return;
        }
        if (_maxWaveNumber > 0 && _currentWaveNumber == _maxWaveNumber)
        {
            //Complete all waves.
            //完成所有的波次。
            OnWaveComplete?.Invoke();
      
            return;
        }
        NodeUtils.ForEachNode<ISpawnMarker>(autoSpawn, marker =>
        {
            var node2D = marker.Spawn(_currentWaveNumber);
            if (node2D is CharacterTemplate characterTemplate)
            {
                //The maximum wave number should be the maximum wave number produced by living organisms.For now, the player's condition for the next step is to kill all enemies.
                //最大波数应该是生物生成的最大波数。就目前而言，玩家进入下一步的条件是杀死所有敌人。
                _maxWaveNumber = Math.Max(_maxWaveNumber, marker.GetMaxWaveNumber());
                if (characterTemplate.RequiredForWaveAdvance)
                {
                    _spawnedCharacter.Add(characterTemplate);
                    characterTemplate.TreeExited += async () =>
                    {
                        _spawnedCharacter.Remove(characterTemplate);
                        if (_spawnedCharacter.Count == 0)
                        {
                            //All the creatures they summoned are dead.
                            //召唤的生物全死了。
                            _currentWaveNumber++;
                            await Task.Delay(Delay);
                            SpawnEnemyWave(autoSpawn);
                        }
                    };
                }
            }
            return false;
        });
        if (_spawnedCharacter.Count > 0)
        {
            OnWaveStart?.Invoke();
        }
    }

}